var we=Object.defineProperty;var xe=(F,t,e)=>t in F?we(F,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):F[t]=e;var W=(F,t,e)=>xe(F,typeof t!="symbol"?t+"":t,e);import*as G from"three";import{Mesh as ge,ShaderMaterial as be,BackSide as Ee,UniformsUtils as ze,BoxGeometry as Ce,Vector3 as Vt}from"three";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const o of n.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function e(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(i){if(i.ep)return;i.ep=!0;const n=e(i);fetch(i.href,n)}})();class Q{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new a);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new a);const s=this.elements,i=t.x,n=t.y,o=t.z;return e.x=s[0]*i+s[1]*n+s[2]*o,e.y=s[3]*i+s[4]*n+s[5]*o,e.z=s[6]*i+s[7]*n+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new Q);const s=this.elements,i=t.elements,n=e.elements,o=s[0],r=s[1],c=s[2],l=s[3],d=s[4],u=s[5],h=s[6],f=s[7],p=s[8],y=i[0],v=i[1],w=i[2],m=i[3],x=i[4],g=i[5],E=i[6],C=i[7],B=i[8];return n[0]=o*y+r*m+c*E,n[1]=o*v+r*x+c*C,n[2]=o*w+r*g+c*B,n[3]=l*y+d*m+u*E,n[4]=l*v+d*x+u*C,n[5]=l*w+d*g+u*B,n[6]=h*y+f*m+p*E,n[7]=h*v+f*x+p*C,n[8]=h*w+f*g+p*B,e}scale(t,e){e===void 0&&(e=new Q);const s=this.elements,i=e.elements;for(let n=0;n!==3;n++)i[3*n+0]=t.x*s[3*n+0],i[3*n+1]=t.y*s[3*n+1],i[3*n+2]=t.z*s[3*n+2];return e}solve(t,e){e===void 0&&(e=new a);const s=3,i=4,n=[];let o,r;for(o=0;o<s*i;o++)n.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)n[o+i*r]=this.elements[o+3*r];n[3+4*0]=t.x,n[3+4*1]=t.y,n[3+4*2]=t.z;let c=3;const l=c;let d;const u=4;let h;do{if(o=l-c,n[o+i*o]===0){for(r=o+1;r<l;r++)if(n[o+i*r]!==0){d=u;do h=u-d,n[h+i*o]+=n[h+i*r];while(--d);break}}if(n[o+i*o]!==0)for(r=o+1;r<l;r++){const f=n[o+i*r]/n[o+i*o];d=u;do h=u-d,n[h+i*r]=h<=o?0:n[h+i*r]-n[h+i*o]*f;while(--d)}}while(--c);if(e.z=n[2*i+3]/n[2*i+2],e.y=(n[1*i+3]-n[1*i+2]*e.z)/n[1*i+1],e.x=(n[0*i+3]-n[0*i+2]*e.z-n[0*i+1]*e.y)/n[0*i+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new Q);const e=3,s=6,i=Se;let n,o;for(n=0;n<3;n++)for(o=0;o<3;o++)i[n+s*o]=this.elements[n+3*o];i[3+6*0]=1,i[3+6*1]=0,i[3+6*2]=0,i[4+6*0]=0,i[4+6*1]=1,i[4+6*2]=0,i[5+6*0]=0,i[5+6*1]=0,i[5+6*2]=1;let r=3;const c=r;let l;const d=s;let u;do{if(n=c-r,i[n+s*n]===0){for(o=n+1;o<c;o++)if(i[n+s*o]!==0){l=d;do u=d-l,i[u+s*n]+=i[u+s*o];while(--l);break}}if(i[n+s*n]!==0)for(o=n+1;o<c;o++){const h=i[n+s*o]/i[n+s*n];l=d;do u=d-l,i[u+s*o]=u<=n?0:i[u+s*o]-i[u+s*n]*h;while(--l)}}while(--r);n=2;do{o=n-1;do{const h=i[n+s*o]/i[n+s*n];l=s;do u=s-l,i[u+s*o]=i[u+s*o]-i[u+s*n]*h;while(--l)}while(o--)}while(--n);n=2;do{const h=1/i[n+s*n];l=s;do u=s-l,i[u+s*n]=i[u+s*n]*h;while(--l)}while(n--);n=2;do{o=2;do{if(u=i[e+o+s*n],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(n,o,u)}while(o--)}while(n--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,i=t.z,n=t.w,o=e+e,r=s+s,c=i+i,l=e*o,d=e*r,u=e*c,h=s*r,f=s*c,p=i*c,y=n*o,v=n*r,w=n*c,m=this.elements;return m[3*0+0]=1-(h+p),m[3*0+1]=d-w,m[3*0+2]=u+v,m[3*1+0]=d+w,m[3*1+1]=1-(l+p),m[3*1+2]=f-y,m[3*2+0]=u-v,m[3*2+1]=f+y,m[3*2+2]=1-(l+h),this}transpose(t){t===void 0&&(t=new Q);const e=this.elements,s=t.elements;let i;return s[0]=e[0],s[4]=e[4],s[8]=e[8],i=e[1],s[1]=e[3],s[3]=i,i=e[2],s[2]=e[6],s[6]=i,i=e[5],s[5]=e[7],s[7]=i,t}}const Se=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class a{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new a);const s=t.x,i=t.y,n=t.z,o=this.x,r=this.y,c=this.z;return e.x=r*n-c*i,e.y=c*s-o*n,e.z=o*i-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new a(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new a(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new Q([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,i=Math.sqrt(t*t+e*e+s*s);if(i>0){const n=1/i;this.x*=n,this.y*=n,this.z*=n}else this.x=0,this.y=0,this.z=0;return i}unit(t){t===void 0&&(t=new a);const e=this.x,s=this.y,i=this.z;let n=Math.sqrt(e*e+s*s+i*i);return n>0?(n=1/n,t.x=e*n,t.y=s*n,t.z=i*n):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,i=this.z,n=t.x,o=t.y,r=t.z;return Math.sqrt((n-e)*(n-e)+(o-s)*(o-s)+(r-i)*(r-i))}distanceSquared(t){const e=this.x,s=this.y,i=this.z,n=t.x,o=t.y,r=t.z;return(n-e)*(n-e)+(o-s)*(o-s)+(r-i)*(r-i)}scale(t,e){e===void 0&&(e=new a);const s=this.x,i=this.y,n=this.z;return e.x=t*s,e.y=t*i,e.z=t*n,e}vmul(t,e){return e===void 0&&(e=new a),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new a),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new a),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const i=Me,n=1/s;i.set(this.x*n,this.y*n,this.z*n);const o=Ae;Math.abs(i.x)<.9?(o.set(1,0,0),i.cross(o,t)):(o.set(0,1,0),i.cross(o,t)),i.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const i=this.x,n=this.y,o=this.z;s.x=i+(t.x-i)*e,s.y=n+(t.y-n)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(jt),jt.almostEquals(t,e)}clone(){return new a(this.x,this.y,this.z)}}a.ZERO=new a(0,0,0);a.UNIT_X=new a(1,0,0);a.UNIT_Y=new a(0,1,0);a.UNIT_Z=new a(0,0,1);const Me=new a,Ae=new a,jt=new a;class K{constructor(t){t===void 0&&(t={}),this.lowerBound=new a,this.upperBound=new a,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,i){const n=this.lowerBound,o=this.upperBound,r=s;n.copy(t[0]),r&&r.vmult(n,n),o.copy(n);for(let c=1;c<t.length;c++){let l=t[c];r&&(r.vmult(l,Gt),l=Gt),l.x>o.x&&(o.x=l.x),l.x<n.x&&(n.x=l.x),l.y>o.y&&(o.y=l.y),l.y<n.y&&(n.y=l.y),l.z>o.z&&(o.z=l.z),l.z<n.z&&(n.z=l.z)}return e&&(e.vadd(n,n),e.vadd(o,o)),i&&(n.x-=i,n.y-=i,n.z-=i,o.x+=i,o.y+=i,o.z+=i),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new K().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,n=t.upperBound,o=i.x<=s.x&&s.x<=n.x||e.x<=n.x&&n.x<=s.x,r=i.y<=s.y&&s.y<=n.y||e.y<=n.y&&n.y<=s.y,c=i.z<=s.z&&s.z<=n.z||e.z<=n.z&&n.z<=s.z;return o&&r&&c}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,n=t.upperBound;return e.x<=i.x&&s.x>=n.x&&e.y<=i.y&&s.y>=n.y&&e.z<=i.z&&s.z>=n.z}getCorners(t,e,s,i,n,o,r,c){const l=this.lowerBound,d=this.upperBound;t.copy(l),e.set(d.x,l.y,l.z),s.set(d.x,d.y,l.z),i.set(l.x,d.y,d.z),n.set(d.x,l.y,d.z),o.set(l.x,d.y,l.z),r.set(l.x,l.y,d.z),c.copy(d)}toLocalFrame(t,e){const s=Ht,i=s[0],n=s[1],o=s[2],r=s[3],c=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(i,n,o,r,c,l,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=Ht,i=s[0],n=s[1],o=s[2],r=s[3],c=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(i,n,o,r,c,l,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,i=1/e.x,n=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*i,c=(this.upperBound.x-s.x)*i,l=(this.lowerBound.y-s.y)*n,d=(this.upperBound.y-s.y)*n,u=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,c),Math.min(l,d)),Math.min(u,h)),p=Math.min(Math.min(Math.max(r,c),Math.max(l,d)),Math.max(u,h));return!(p<0||f>p)}}const Gt=new a,Ht=[new a,new a,new a,new a,new a,new a,new a,new a];class Dt{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:i}=e;if(i>s){const n=i;i=s,s=n}return this.matrix[(s*(s+1)>>1)+i-1]}set(t,e,s){let{index:i}=t,{index:n}=e;if(n>i){const o=n;n=i,i=o}this.matrix[(i*(i+1)>>1)+n-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class ae{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const i=s[t].indexOf(e);return i!==-1&&s[t].splice(i,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let i=0,n=s.length;i<n;i++)s[i].call(this,t)}return this}}class D{constructor(t,e,s,i){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),i===void 0&&(i=1),this.x=t,this.y=e,this.z=s,this.w=i}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new a),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=Be,i=Pe;t.tangents(s,i),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new D);const s=this.x,i=this.y,n=this.z,o=this.w,r=t.x,c=t.y,l=t.z,d=t.w;return e.x=s*d+o*r+i*l-n*c,e.y=i*d+o*c+n*r-s*l,e.z=n*d+o*l+s*c-i*r,e.w=o*d-s*r-i*c-n*l,e}inverse(t){t===void 0&&(t=new D);const e=this.x,s=this.y,i=this.z,n=this.w;this.conjugate(t);const o=1/(e*e+s*s+i*i+n*n);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new D),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new a);const s=t.x,i=t.y,n=t.z,o=this.x,r=this.y,c=this.z,l=this.w,d=l*s+r*n-c*i,u=l*i+c*s-o*n,h=l*n+o*i-r*s,f=-o*s-r*i-c*n;return e.x=d*l+f*-o+u*-c-h*-r,e.y=u*l+f*-r+h*-o-d*-c,e.z=h*l+f*-c+d*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,i,n;const o=this.x,r=this.y,c=this.z,l=this.w;switch(e){case"YZX":const d=o*r+c*l;if(d>.499&&(s=2*Math.atan2(o,l),i=Math.PI/2,n=0),d<-.499&&(s=-2*Math.atan2(o,l),i=-Math.PI/2,n=0),s===void 0){const u=o*o,h=r*r,f=c*c;s=Math.atan2(2*r*l-2*o*c,1-2*h-2*f),i=Math.asin(2*d),n=Math.atan2(2*o*l-2*r*c,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=i,t.x=n}setFromEuler(t,e,s,i){i===void 0&&(i="XYZ");const n=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),c=Math.sin(t/2),l=Math.sin(e/2),d=Math.sin(s/2);return i==="XYZ"?(this.x=c*o*r+n*l*d,this.y=n*l*r-c*o*d,this.z=n*o*d+c*l*r,this.w=n*o*r-c*l*d):i==="YXZ"?(this.x=c*o*r+n*l*d,this.y=n*l*r-c*o*d,this.z=n*o*d-c*l*r,this.w=n*o*r+c*l*d):i==="ZXY"?(this.x=c*o*r-n*l*d,this.y=n*l*r+c*o*d,this.z=n*o*d+c*l*r,this.w=n*o*r-c*l*d):i==="ZYX"?(this.x=c*o*r-n*l*d,this.y=n*l*r+c*o*d,this.z=n*o*d-c*l*r,this.w=n*o*r+c*l*d):i==="YZX"?(this.x=c*o*r+n*l*d,this.y=n*l*r+c*o*d,this.z=n*o*d-c*l*r,this.w=n*o*r-c*l*d):i==="XZY"&&(this.x=c*o*r-n*l*d,this.y=n*l*r-c*o*d,this.z=n*o*d+c*l*r,this.w=n*o*r+c*l*d),this}clone(){return new D(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new D);const i=this.x,n=this.y,o=this.z,r=this.w;let c=t.x,l=t.y,d=t.z,u=t.w,h,f,p,y,v;return f=i*c+n*l+o*d+r*u,f<0&&(f=-f,c=-c,l=-l,d=-d,u=-u),1-f>1e-6?(h=Math.acos(f),p=Math.sin(h),y=Math.sin((1-e)*h)/p,v=Math.sin(e*h)/p):(y=1-e,v=e),s.x=y*i+v*c,s.y=y*n+v*l,s.z=y*o+v*d,s.w=y*r+v*u,s}integrate(t,e,s,i){i===void 0&&(i=new D);const n=t.x*s.x,o=t.y*s.y,r=t.z*s.z,c=this.x,l=this.y,d=this.z,u=this.w,h=e*.5;return i.x+=h*(n*u+o*d-r*l),i.y+=h*(o*u+r*c-n*d),i.z+=h*(r*u+n*l-o*c),i.w+=h*(-n*c-o*l-r*d),i}}const Be=new a,Pe=new a,Ne={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class A{constructor(t){t===void 0&&(t={}),this.id=A.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,i){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}A.idCounter=0;A.types=Ne;class O{constructor(t){t===void 0&&(t={}),this.position=new a,this.quaternion=new D,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return O.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return O.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,i){return i===void 0&&(i=new a),s.vsub(t,i),e.conjugate(Yt),Yt.vmult(i,i),i}static pointToWorldFrame(t,e,s,i){return i===void 0&&(i=new a),e.vmult(s,i),i.vadd(t,i),i}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new a),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,i){return i===void 0&&(i=new a),e.w*=-1,e.vmult(s,i),e.w*=-1,i}}const Yt=new D;class yt extends A{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:i=[],axes:n,boundingSphereRadius:o}=t;super({type:A.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=i,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=n?n.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const i=new a;for(let n=0;n!==t.length;n++){const o=t[n],r=o.length;for(let c=0;c!==r;c++){const l=(c+1)%r;e[o[c]].vsub(e[o[l]],i),i.normalize();let d=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(i)||s[u].almostEquals(i)){d=!0;break}d||s.push(i.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let i=0;i<this.faces[t].length;i++)if(!this.vertices[this.faces[t][i]])throw new Error(`Vertex ${this.faces[t][i]} not found!`);const e=this.faceNormals[t]||new a;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let i=0;i<this.faces[t].length;i++)console.warn(`.vertices[${this.faces[t][i]}] = Vec3(${this.vertices[this.faces[t][i]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],i=this.vertices[s[0]],n=this.vertices[s[1]],o=this.vertices[s[2]];yt.computeNormal(i,n,o,e)}static computeNormal(t,e,s,i){const n=new a,o=new a;e.vsub(t,o),s.vsub(e,n),n.cross(o,i),i.isZero()||i.normalize()}clipAgainstHull(t,e,s,i,n,o,r,c,l){const d=new a;let u=-1,h=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){d.copy(s.faceNormals[p]),n.vmult(d,d);const y=d.dot(o);y>h&&(h=y,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const y=s.vertices[s.faces[u][p]],v=new a;v.copy(y),n.vmult(v,v),i.vadd(v,v),f.push(v)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,c,l)}findSeparatingAxis(t,e,s,i,n,o,r,c){const l=new a,d=new a,u=new a,h=new a,f=new a,p=new a;let y=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let w=0;w!==v.uniqueAxes.length;w++){s.vmult(v.uniqueAxes[w],l);const m=v.testSepAxis(l,t,e,s,i,n);if(m===!1)return!1;m<y&&(y=m,o.copy(l))}else{const w=r?r.length:v.faces.length;for(let m=0;m<w;m++){const x=r?r[m]:m;l.copy(v.faceNormals[x]),s.vmult(l,l);const g=v.testSepAxis(l,t,e,s,i,n);if(g===!1)return!1;g<y&&(y=g,o.copy(l))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){n.vmult(t.uniqueAxes[w],d);const m=v.testSepAxis(d,t,e,s,i,n);if(m===!1)return!1;m<y&&(y=m,o.copy(d))}else{const w=c?c.length:t.faces.length;for(let m=0;m<w;m++){const x=c?c[m]:m;d.copy(t.faceNormals[x]),n.vmult(d,d);const g=v.testSepAxis(d,t,e,s,i,n);if(g===!1)return!1;g<y&&(y=g,o.copy(d))}}for(let w=0;w!==v.uniqueEdges.length;w++){s.vmult(v.uniqueEdges[w],h);for(let m=0;m!==t.uniqueEdges.length;m++)if(n.vmult(t.uniqueEdges[m],f),h.cross(f,p),!p.almostZero()){p.normalize();const x=v.testSepAxis(p,t,e,s,i,n);if(x===!1)return!1;x<y&&(y=x,o.copy(p))}}return i.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,i,n,o){const r=this;yt.project(r,t,s,i,Tt),yt.project(e,t,n,o,Ft);const c=Tt[0],l=Tt[1],d=Ft[0],u=Ft[1];if(c<u||d<l)return!1;const h=c-u,f=d-l;return h<f?h:f}calculateLocalInertia(t,e){const s=new a,i=new a;this.computeLocalAABB(i,s);const n=s.x-i.x,o=s.y-i.y,r=s.z-i.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*n*2*n+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*n*2*n)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],i=this.vertices[e[0]];return-s.dot(i)}clipFaceAgainstHull(t,e,s,i,n,o,r){const c=new a,l=new a,d=new a,u=new a,h=new a,f=new a,p=new a,y=new a,v=this,w=[],m=i,x=w;let g=-1,E=Number.MAX_VALUE;for(let N=0;N<v.faces.length;N++){c.copy(v.faceNormals[N]),s.vmult(c,c);const R=c.dot(t);R<E&&(E=R,g=N)}if(g<0)return;const C=v.faces[g];C.connectedFaces=[];for(let N=0;N<v.faces.length;N++)for(let R=0;R<v.faces[N].length;R++)C.indexOf(v.faces[N][R])!==-1&&N!==g&&C.connectedFaces.indexOf(N)===-1&&C.connectedFaces.push(N);const B=C.length;for(let N=0;N<B;N++){const R=v.vertices[C[N]],L=v.vertices[C[(N+1)%B]];R.vsub(L,l),d.copy(l),s.vmult(d,d),e.vadd(d,d),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),d.cross(u,h),h.negate(h),f.copy(R),s.vmult(f,f),e.vadd(f,f);const b=C.connectedFaces[N];p.copy(this.faceNormals[b]);const M=this.getPlaneConstantOfFace(b);y.copy(p),s.vmult(y,y);const S=M-y.dot(e);for(this.clipFaceAgainstPlane(m,x,y,S);m.length;)m.shift();for(;x.length;)m.push(x.shift())}p.copy(this.faceNormals[g]);const T=this.getPlaneConstantOfFace(g);y.copy(p),s.vmult(y,y);const _=T-y.dot(e);for(let N=0;N<m.length;N++){let R=y.dot(m[N])+_;if(R<=n&&(console.log(`clamped: depth=${R} to minDist=${n}`),R=n),R<=o){const L=m[N];if(R<=1e-6){const b={point:L,normal:y,depth:R};r.push(b)}}}}clipFaceAgainstPlane(t,e,s,i){let n,o;const r=t.length;if(r<2)return e;let c=t[t.length-1],l=t[0];n=s.dot(c)+i;for(let d=0;d<r;d++){if(l=t[d],o=s.dot(l)+i,n<0)if(o<0){const u=new a;u.copy(l),e.push(u)}else{const u=new a;c.lerp(l,n/(n-o),u),e.push(u)}else if(o<0){const u=new a;c.lerp(l,n/(n-o),u),e.push(u),e.push(l)}c=l,n=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new a);const s=this.vertices,i=this.worldVertices;for(let n=0;n!==this.vertices.length;n++)e.vmult(s[n],i[n]),t.vadd(i[n],i[n]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let i=0;i<this.vertices.length;i++){const n=s[i];n.x<t.x?t.x=n.x:n.x>e.x&&(e.x=n.x),n.y<t.y?t.y=n.y:n.y>e.y&&(e.y=n.y),n.z<t.z?t.z=n.z:n.z>e.z&&(e.z=n.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new a);const s=this.faceNormals,i=this.worldFaceNormals;for(let n=0;n!==e;n++)t.vmult(s[n],i[n]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const i=e[s].lengthSquared();i>t&&(t=i)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const n=this.vertices;let o,r,c,l,d,u,h=new a;for(let f=0;f<n.length;f++){h.copy(n[f]),e.vmult(h,h),t.vadd(h,h);const p=h;(o===void 0||p.x<o)&&(o=p.x),(l===void 0||p.x>l)&&(l=p.x),(r===void 0||p.y<r)&&(r=p.y),(d===void 0||p.y>d)&&(d=p.y),(c===void 0||p.z<c)&&(c=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,c),i.set(l,d,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new a);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,i=this.vertices;if(e){for(let n=0;n<s;n++){const o=i[n];e.vmult(o,o)}for(let n=0;n<this.faceNormals.length;n++){const o=this.faceNormals[n];e.vmult(o,o)}}if(t)for(let n=0;n<s;n++){const o=i[n];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,i=this.faceNormals,n=new a;this.getAveragePointLocal(n);for(let o=0;o<this.faces.length;o++){let r=i[o];const c=e[s[o][0]],l=new a;t.vsub(c,l);const d=r.dot(l),u=new a;n.vsub(c,u);const h=r.dot(u);if(d<0&&h>0||d>0&&h<0)return!1}return-1}static project(t,e,s,i,n){const o=t.vertices.length,r=Te;let c=0,l=0;const d=Fe,u=t.vertices;d.setZero(),O.vectorToLocalFrame(s,i,e,r),O.pointToLocalFrame(s,i,d,d);const h=d.dot(r);l=c=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>c&&(c=p),p<l&&(l=p)}if(l-=h,c-=h,l>c){const f=l;l=c,c=f}n[0]=c,n[1]=l}}const Tt=[],Ft=[];new a;const Te=new a,Fe=new a;let ce=class le extends A{constructor(t){super({type:A.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,i=a,n=[new i(-t,-e,-s),new i(t,-e,-s),new i(t,e,-s),new i(-t,e,-s),new i(-t,-e,s),new i(t,-e,s),new i(t,e,s),new i(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new i(0,0,1),new i(0,1,0),new i(1,0,0)],c=new yt({vertices:n,faces:o,axes:r});this.convexPolyhedronRepresentation=c,c.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new a),le.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const i=t;s.x=1/12*e*(2*i.y*2*i.y+2*i.z*2*i.z),s.y=1/12*e*(2*i.x*2*i.x+2*i.z*2*i.z),s.z=1/12*e*(2*i.y*2*i.y+2*i.x*2*i.x)}getSideNormals(t,e){const s=t,i=this.halfExtents;if(s[0].set(i.x,0,0),s[1].set(0,i.y,0),s[2].set(0,0,i.z),s[3].set(-i.x,0,0),s[4].set(0,-i.y,0),s[5].set(0,0,-i.z),e!==void 0)for(let n=0;n!==s.length;n++)e.vmult(s[n],s[n]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const i=this.halfExtents,n=[[i.x,i.y,i.z],[-i.x,i.y,i.z],[-i.x,-i.y,i.z],[-i.x,-i.y,-i.z],[i.x,-i.y,-i.z],[i.x,i.y,-i.z],[-i.x,i.y,-i.z],[i.x,-i.y,i.z]];for(let o=0;o<n.length;o++)at.set(n[o][0],n[o][1],n[o][2]),e.vmult(at,at),t.vadd(at,at),s(at.x,at.y,at.z)}calculateWorldAABB(t,e,s,i){const n=this.halfExtents;J[0].set(n.x,n.y,n.z),J[1].set(-n.x,n.y,n.z),J[2].set(-n.x,-n.y,n.z),J[3].set(-n.x,-n.y,-n.z),J[4].set(n.x,-n.y,-n.z),J[5].set(n.x,n.y,-n.z),J[6].set(-n.x,n.y,-n.z),J[7].set(n.x,-n.y,n.z);const o=J[0];e.vmult(o,o),t.vadd(o,o),i.copy(o),s.copy(o);for(let r=1;r<8;r++){const c=J[r];e.vmult(c,c),t.vadd(c,c);const l=c.x,d=c.y,u=c.z;l>i.x&&(i.x=l),d>i.y&&(i.y=d),u>i.z&&(i.z=u),l<s.x&&(s.x=l),d<s.y&&(s.y=d),u<s.z&&(s.z=u)}}};const at=new a,J=[new a,new a,new a,new a,new a,new a,new a,new a],Lt={DYNAMIC:1,STATIC:2,KINEMATIC:4},kt={AWAKE:0,SLEEPY:1,SLEEPING:2};class P extends ae{constructor(t){t===void 0&&(t={}),super(),this.id=P.idCounter++,this.index=-1,this.world=null,this.vlambda=new a,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new a,this.previousPosition=new a,this.interpolatedPosition=new a,this.initPosition=new a,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new a,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new a,this.force=new a;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?P.STATIC:P.DYNAMIC,typeof t.type==typeof P.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=P.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new a,this.quaternion=new D,this.initQuaternion=new D,this.previousQuaternion=new D,this.interpolatedQuaternion=new D,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new a,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new a,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new a,this.invInertia=new a,this.invInertiaWorld=new Q,this.invMassSolve=0,this.invInertiaSolve=new a,this.invInertiaWorldSolve=new Q,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new a(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new a(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new K,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new a,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=P.AWAKE,this.wakeUpAfterNarrowphase=!1,t===P.SLEEPING&&this.dispatchEvent(P.wakeupEvent)}sleep(){this.sleepState=P.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),i=this.sleepSpeedLimit**2;e===P.AWAKE&&s<i?(this.sleepState=P.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(P.sleepyEvent)):e===P.SLEEPY&&s>i?this.wakeUp():e===P.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(P.sleepEvent))}}updateSolveMassProperties(){this.sleepState===P.SLEEPING||this.type===P.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new a),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new a),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e}addShape(t,e,s){const i=new a,n=new D;return e&&i.copy(e),s&&n.copy(s),this.shapes.push(t),this.shapeOffsets.push(i),this.shapeOrientations.push(n),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let i=0;for(let n=0;n!==s;n++){const o=t[n];o.updateBoundingSphereRadius();const r=e[n].length(),c=o.boundingSphereRadius;r+c>i&&(i=r+c)}this.boundingRadius=i}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,i=t.length,n=Ie,o=Re,r=this.quaternion,c=this.aabb,l=_e;for(let d=0;d!==i;d++){const u=t[d];r.vmult(e[d],n),n.vadd(this.position,n),r.mult(s[d],o),u.calculateWorldAABB(n,o,l.lowerBound,l.upperBound),d===0?c.copy(l):c.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=qe,i=Le;s.setRotationFromQuaternion(this.quaternion),s.transpose(i),s.scale(e,s),s.mmult(i,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new a),this.type!==P.DYNAMIC)return;this.sleepState===P.SLEEPING&&this.wakeUp();const s=ke;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new a),this.type!==P.DYNAMIC)return;const s=We,i=Oe;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyForce(s,i)}applyTorque(t){this.type===P.DYNAMIC&&(this.sleepState===P.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new a),this.type!==P.DYNAMIC)return;this.sleepState===P.SLEEPING&&this.wakeUp();const s=e,i=Ve;i.copy(t),i.scale(this.invMass,i),this.velocity.vadd(i,this.velocity);const n=je;s.cross(t,n),this.invInertiaWorld.vmult(n,n),this.angularVelocity.vadd(n,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new a),this.type!==P.DYNAMIC)return;const s=Ge,i=He;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyImpulse(s,i)}updateMassProperties(){const t=De;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),ce.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new a;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===P.DYNAMIC||this.type===P.KINEMATIC)||this.sleepState===P.SLEEPING)return;const i=this.velocity,n=this.angularVelocity,o=this.position,r=this.force,c=this.torque,l=this.quaternion,d=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,f=d*t;i.x+=r.x*f*h.x,i.y+=r.y*f*h.y,i.z+=r.z*f*h.z;const p=u.elements,y=this.angularFactor,v=c.x*y.x,w=c.y*y.y,m=c.z*y.z;n.x+=t*(p[0]*v+p[1]*w+p[2]*m),n.y+=t*(p[3]*v+p[4]*w+p[5]*m),n.z+=t*(p[6]*v+p[7]*w+p[8]*m),o.x+=i.x*t,o.y+=i.y*t,o.z+=i.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}P.idCounter=0;P.COLLIDE_EVENT_NAME="collide";P.DYNAMIC=Lt.DYNAMIC;P.STATIC=Lt.STATIC;P.KINEMATIC=Lt.KINEMATIC;P.AWAKE=kt.AWAKE;P.SLEEPY=kt.SLEEPY;P.SLEEPING=kt.SLEEPING;P.wakeupEvent={type:"wakeup"};P.sleepyEvent={type:"sleepy"};P.sleepEvent={type:"sleep"};const Ie=new a,Re=new D,_e=new K,qe=new Q,Le=new Q;new Q;const ke=new a,We=new a,Oe=new a,Ve=new a,je=new a,Ge=new a,He=new a,De=new a;class Ye{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(!(t.collisionFilterGroup&e.collisionFilterMask)||!(e.collisionFilterGroup&t.collisionFilterMask)||(t.type&P.STATIC||t.sleepState===P.SLEEPING)&&(e.type&P.STATIC||e.sleepState===P.SLEEPING))}intersectionTest(t,e,s,i){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,i):this.doBoundingSphereBroadphase(t,e,s,i)}doBoundingSphereBroadphase(t,e,s,i){const n=Ue;e.position.vsub(t.position,n);const o=(t.boundingRadius+e.boundingRadius)**2;n.lengthSquared()<o&&(s.push(t),i.push(e))}doBoundingBoxBroadphase(t,e,s,i){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),i.push(e))}makePairsUnique(t,e){const s=Xe,i=$e,n=Ke,o=t.length;for(let r=0;r!==o;r++)i[r]=t[r],n[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const c=i[r].id,l=n[r].id,d=c<l?`${c},${l}`:`${l},${c}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const c=s.keys.pop(),l=s[c];t.push(i[l]),e.push(n[l]),delete s[c]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new a;t.position.vsub(e.position,s);const i=t.shapes[0],n=e.shapes[0];return Math.pow(i.boundingSphereRadius+n.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const Ue=new a;new a;new D;new a;const Xe={keys:[]},$e=[],Ke=[];new a;new a;new a;class he extends Ye{constructor(){super()}collisionPairs(t,e,s){const i=t.bodies,n=i.length;let o,r;for(let c=0;c!==n;c++)for(let l=0;l!==c;l++)o=i[c],r=i[l],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let i=0;i<t.bodies.length;i++){const n=t.bodies[i];n.aabbNeedsUpdate&&n.updateAABB(),n.aabb.overlaps(e)&&s.push(n)}return s}}class Mt{constructor(){this.rayFromWorld=new a,this.rayToWorld=new a,this.hitNormalWorld=new a,this.hitPointWorld=new a,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,i,n,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(i),this.shape=n,this.body=o,this.distance=r}}let de,ue,pe,fe,me,ve,ye;const Wt={CLOSEST:1,ANY:2,ALL:4};de=A.types.SPHERE;ue=A.types.PLANE;pe=A.types.BOX;fe=A.types.CYLINDER;me=A.types.CONVEXPOLYHEDRON;ve=A.types.HEIGHTFIELD;ye=A.types.TRIMESH;class H{get[de](){return this._intersectSphere}get[ue](){return this._intersectPlane}get[pe](){return this._intersectBox}get[fe](){return this._intersectConvex}get[me](){return this._intersectConvex}get[ve](){return this._intersectHeightfield}get[ye](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new a),e===void 0&&(e=new a),this.from=t.clone(),this.to=e.clone(),this.direction=new a,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=H.ANY,this.result=new Mt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||H.ANY,this.result=e.result||new Mt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Ut),It.length=0,t.broadphase.aabbQuery(t,Ut,It),this.intersectBodies(It),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||!(this.collisionFilterGroup&t.collisionFilterMask)||!(t.collisionFilterGroup&this.collisionFilterMask))return;const i=Ze,n=Qe;for(let o=0,r=t.shapes.length;o<r;o++){const c=t.shapes[o];if(!(s&&!c.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],n),t.quaternion.vmult(t.shapeOffsets[o],i),i.vadd(t.position,i),this.intersectShape(c,n,i,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,i=t.length;!this.result.shouldStop&&s<i;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,i){const n=this.from;if(us(n,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,i,t)}_intersectBox(t,e,s,i,n){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,i,n)}_intersectPlane(t,e,s,i,n){const o=this.from,r=this.to,c=this.direction,l=new a(0,0,1);e.vmult(l,l);const d=new a;o.vsub(s,d);const u=d.dot(l);r.vsub(s,d);const h=d.dot(l);if(u*h>0||o.distanceTo(r)<u)return;const f=l.dot(c);if(Math.abs(f)<this.precision)return;const p=new a,y=new a,v=new a;o.vsub(s,p);const w=-l.dot(p)/f;c.scale(w,y),o.vadd(y,v),this.reportIntersection(l,v,n,i,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,i=this.to,n=this.from;e.x=Math.min(i.x,n.x),e.y=Math.min(i.y,n.y),e.z=Math.min(i.z,n.z),s.x=Math.max(i.x,n.x),s.y=Math.max(i.y,n.y),s.z=Math.max(i.z,n.z)}_intersectHeightfield(t,e,s,i,n){t.data,t.elementSize;const o=Je;o.from.copy(this.from),o.to.copy(this.to),O.pointToLocalFrame(s,e,o.from,o.from),O.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=ts;let c,l,d,u;c=l=0,d=u=t.data.length-1;const h=new K;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),c=Math.max(c,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),u=Math.min(u,r[1]+1);for(let f=c;f<d;f++)for(let p=l;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),O.pointToWorldFrame(s,e,t.pillarOffset,bt),this._intersectConvex(t.pillarConvex,e,bt,i,n,Xt),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),O.pointToWorldFrame(s,e,t.pillarOffset,bt),this._intersectConvex(t.pillarConvex,e,bt,i,n,Xt)}}}_intersectSphere(t,e,s,i,n){const o=this.from,r=this.to,c=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-c**2,h=d**2-4*l*u,f=es,p=ss;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,n,i,-1);else{const y=(-d-Math.sqrt(h))/(2*l),v=(-d+Math.sqrt(h))/(2*l);if(y>=0&&y<=1&&(o.lerp(r,y,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,n,i,-1)),this.result.shouldStop)return;v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,n,i,-1))}}_intersectConvex(t,e,s,i,n,o){const r=is,c=$t,l=o&&o.faceList||null,d=t.faces,u=t.vertices,h=t.faceNormals,f=this.direction,p=this.from,y=this.to,v=p.distanceTo(y),w=l?l.length:d.length,m=this.result;for(let x=0;!m.shouldStop&&x<w;x++){const g=l?l[x]:x,E=d[g],C=h[g],B=e,T=s;c.copy(u[E[0]]),B.vmult(c,c),c.vadd(T,c),c.vsub(p,c),B.vmult(C,r);const _=f.dot(r);if(Math.abs(_)<this.precision)continue;const N=r.dot(c)/_;if(!(N<0)){f.scale(N,$),$.vadd(p,$),Z.copy(u[E[0]]),B.vmult(Z,Z),T.vadd(Z,Z);for(let R=1;!m.shouldStop&&R<E.length-1;R++){tt.copy(u[E[R]]),et.copy(u[E[R+1]]),B.vmult(tt,tt),B.vmult(et,et),T.vadd(tt,tt),T.vadd(et,et);const L=$.distanceTo(p);!(H.pointInTriangle($,Z,tt,et)||H.pointInTriangle($,tt,Z,et))||L>v||this.reportIntersection(r,$,n,i,g)}}}}_intersectTrimesh(t,e,s,i,n,o){const r=ns,c=hs,l=ds,d=$t,u=os,h=rs,f=as,p=ls,y=cs,v=t.indices;t.vertices;const w=this.from,m=this.to,x=this.direction;l.position.copy(s),l.quaternion.copy(e),O.vectorToLocalFrame(s,e,x,u),O.pointToLocalFrame(s,e,w,h),O.pointToLocalFrame(s,e,m,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,u),u.normalize();const g=h.distanceSquared(f);t.tree.rayQuery(this,l,c);for(let E=0,C=c.length;!this.result.shouldStop&&E!==C;E++){const B=c[E];t.getNormal(B,r),t.getVertex(v[B*3],Z),Z.vsub(h,d);const T=u.dot(r),_=r.dot(d)/T;if(_<0)continue;u.scale(_,$),$.vadd(h,$),t.getVertex(v[B*3+1],tt),t.getVertex(v[B*3+2],et);const N=$.distanceSquared(h);!(H.pointInTriangle($,tt,Z,et)||H.pointInTriangle($,Z,tt,et))||N>g||(O.vectorToWorldFrame(e,r,y),O.pointToWorldFrame(s,e,$,p),this.reportIntersection(y,p,n,i,B))}c.length=0}reportIntersection(t,e,s,i,n){const o=this.from,r=this.to,c=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=typeof n<"u"?n:-1,this.mode){case H.ALL:this.hasHit=!0,l.set(o,r,t,e,s,i,c),l.hasHit=!0,this.callback(l);break;case H.CLOSEST:(c<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,i,c));break;case H.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,i,c),l.shouldStop=!0;break}}static pointInTriangle(t,e,s,i){i.vsub(e,lt),s.vsub(e,pt),t.vsub(e,Rt);const n=lt.dot(lt),o=lt.dot(pt),r=lt.dot(Rt),c=pt.dot(pt),l=pt.dot(Rt);let d,u;return(d=c*r-o*l)>=0&&(u=n*l-o*r)>=0&&d+u<n*c-o*o}}H.CLOSEST=Wt.CLOSEST;H.ANY=Wt.ANY;H.ALL=Wt.ALL;const Ut=new K,It=[],pt=new a,Rt=new a,Ze=new a,Qe=new D,$=new a,Z=new a,tt=new a,et=new a;new a;new Mt;const Xt={faceList:[0]},bt=new a,Je=new H,ts=[],es=new a,ss=new a,is=new a;new a;new a;const $t=new a,ns=new a,os=new a,rs=new a,as=new a,cs=new a,ls=new a;new K;const hs=[],ds=new O,lt=new a,Et=new a;function us(F,t,e){e.vsub(F,lt);const s=lt.dot(t);return t.scale(s,Et),Et.vadd(F,Et),e.distanceTo(Et)}class ps{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Kt{constructor(){this.spatial=new a,this.rotational=new a}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class wt{constructor(t,e,s,i){s===void 0&&(s=-1e6),i===void 0&&(i=1e6),this.id=wt.idCounter++,this.minForce=s,this.maxForce=i,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Kt,this.jacobianElementB=new Kt,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const i=e,n=t,o=s;this.a=4/(o*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(o*o*n*(1+4*i))}computeB(t,e,s){const i=this.computeGW(),n=this.computeGq(),o=this.computeGiMf();return-n*t-i*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.position,o=i.position;return t.spatial.dot(n)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.velocity,o=i.velocity,r=s.angularVelocity,c=i.angularVelocity;return t.multiplyVectors(n,r)+e.multiplyVectors(o,c)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.vlambda,o=i.vlambda,r=s.wlambda,c=i.wlambda;return t.multiplyVectors(n,r)+e.multiplyVectors(o,c)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.force,o=s.torque,r=i.force,c=i.torque,l=s.invMassSolve,d=i.invMassSolve;return n.scale(l,Zt),r.scale(d,Qt),s.invInertiaWorldSolve.vmult(o,Jt),i.invInertiaWorldSolve.vmult(c,te),t.multiplyVectors(Zt,Jt)+e.multiplyVectors(Qt,te)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.invMassSolve,o=i.invMassSolve,r=s.invInertiaWorldSolve,c=i.invInertiaWorldSolve;let l=n+o;return r.vmult(t.rotational,zt),l+=zt.dot(t.rotational),c.vmult(e.rotational,zt),l+=zt.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,i=this.bi,n=this.bj,o=fs;i.vlambda.addScaledVector(i.invMassSolve*t,e.spatial,i.vlambda),n.vlambda.addScaledVector(n.invMassSolve*t,s.spatial,n.vlambda),i.invInertiaWorldSolve.vmult(e.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda),n.invInertiaWorldSolve.vmult(s.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}wt.idCounter=0;const Zt=new a,Qt=new a,Jt=new a,te=new a,zt=new a,fs=new a;class ms extends wt{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new a,this.rj=new a,this.ni=new a}computeB(t){const e=this.a,s=this.b,i=this.bi,n=this.bj,o=this.ri,r=this.rj,c=vs,l=ys,d=i.velocity,u=i.angularVelocity;i.force,i.torque;const h=n.velocity,f=n.angularVelocity;n.force,n.torque;const p=ws,y=this.jacobianElementA,v=this.jacobianElementB,w=this.ni;o.cross(w,c),r.cross(w,l),w.negate(y.spatial),c.negate(y.rotational),v.spatial.copy(w),v.rotational.copy(l),p.copy(n.position),p.vadd(r,p),p.vsub(i.position,p),p.vsub(o,p);const m=w.dot(p),x=this.restitution+1,g=x*h.dot(w)-x*d.dot(w)+f.dot(l)-u.dot(c),E=this.computeGiMf();return-m*e-g*s-t*E}getImpactVelocityAlongNormal(){const t=xs,e=gs,s=bs,i=Es,n=zs;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,i),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(i,e),t.vsub(e,n),this.ni.dot(n)}}const vs=new a,ys=new a,ws=new a,xs=new a,gs=new a,bs=new a,Es=new a,zs=new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;class ee extends wt{constructor(t,e,s){super(t,e,-s,s),this.ri=new a,this.rj=new a,this.t=new a}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,i=this.rj,n=Cs,o=Ss,r=this.t;s.cross(r,n),i.cross(r,o);const c=this.jacobianElementA,l=this.jacobianElementB;r.negate(c.spatial),n.negate(c.rotational),l.spatial.copy(r),l.rotational.copy(o);const d=this.computeGW(),u=this.computeGiMf();return-d*e-t*u}}const Cs=new a,Ss=new a;class At{constructor(t,e,s){s=ps.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=At.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}At.idCounter=0;class xt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=xt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}xt.idCounter=0;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new H;new a;new a;new a;new a(1,0,0),new a(0,1,0),new a(0,0,1);new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;class Ms extends A{constructor(t){if(super({type:A.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new a);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,i){const n=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const c=o[r];s[c]=t[c]-n,i[c]=t[c]+n}}}new a;new a;new a;new a;new a;new a;new a;new a;new a;class As extends A{constructor(){super({type:A.types.PLANE}),this.worldNormal=new a,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new a),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){st.set(0,0,1),e.vmult(st,st);const n=Number.MAX_VALUE;s.set(-n,-n,-n),i.set(n,n,n),st.x===1?i.x=t.x:st.x===-1&&(s.x=t.x),st.y===1?i.y=t.y:st.y===-1&&(s.y=t.y),st.z===1?i.z=t.z:st.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const st=new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new K;new a;new K;new a;new a;new a;new a;new a;new a;new a;new K;new a;new O;new K;class Bs{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class Ps extends Bs{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const i=this.iterations,n=this.tolerance*this.tolerance,o=this.equations,r=o.length,c=e.bodies,l=c.length,d=t;let u,h,f,p,y,v;if(r!==0)for(let g=0;g!==l;g++)c[g].updateSolveMassProperties();const w=Ts,m=Fs,x=Ns;w.length=r,m.length=r,x.length=r;for(let g=0;g!==r;g++){const E=o[g];x[g]=0,m[g]=E.computeB(d),w[g]=1/E.computeC()}if(r!==0){for(let C=0;C!==l;C++){const B=c[C],T=B.vlambda,_=B.wlambda;T.set(0,0,0),_.set(0,0,0)}for(s=0;s!==i;s++){p=0;for(let C=0;C!==r;C++){const B=o[C];u=m[C],h=w[C],v=x[C],y=B.computeGWlambda(),f=h*(u-y-B.eps*v),v+f<B.minForce?f=B.minForce-v:v+f>B.maxForce&&(f=B.maxForce-v),x[C]+=f,p+=f>0?f:-f,B.addToWlambda(f)}if(p*p<n)break}for(let C=0;C!==l;C++){const B=c[C],T=B.velocity,_=B.angularVelocity;B.vlambda.vmul(B.linearFactor,B.vlambda),T.vadd(B.vlambda,T),B.wlambda.vmul(B.angularFactor,B.wlambda),_.vadd(B.wlambda,_)}let g=o.length;const E=1/d;for(;g--;)o[g].multiplier=x[g]*E}return s}}const Ns=[],Ts=[],Fs=[];class Is{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class Rs extends Is{constructor(){super(...arguments),this.type=a}constructObject(){return new a}}const V={sphereSphere:A.types.SPHERE,spherePlane:A.types.SPHERE|A.types.PLANE,boxBox:A.types.BOX|A.types.BOX,sphereBox:A.types.SPHERE|A.types.BOX,planeBox:A.types.PLANE|A.types.BOX,convexConvex:A.types.CONVEXPOLYHEDRON,sphereConvex:A.types.SPHERE|A.types.CONVEXPOLYHEDRON,planeConvex:A.types.PLANE|A.types.CONVEXPOLYHEDRON,boxConvex:A.types.BOX|A.types.CONVEXPOLYHEDRON,sphereHeightfield:A.types.SPHERE|A.types.HEIGHTFIELD,boxHeightfield:A.types.BOX|A.types.HEIGHTFIELD,convexHeightfield:A.types.CONVEXPOLYHEDRON|A.types.HEIGHTFIELD,sphereParticle:A.types.PARTICLE|A.types.SPHERE,planeParticle:A.types.PLANE|A.types.PARTICLE,boxParticle:A.types.BOX|A.types.PARTICLE,convexParticle:A.types.PARTICLE|A.types.CONVEXPOLYHEDRON,cylinderCylinder:A.types.CYLINDER,sphereCylinder:A.types.SPHERE|A.types.CYLINDER,planeCylinder:A.types.PLANE|A.types.CYLINDER,boxCylinder:A.types.BOX|A.types.CYLINDER,convexCylinder:A.types.CONVEXPOLYHEDRON|A.types.CYLINDER,heightfieldCylinder:A.types.HEIGHTFIELD|A.types.CYLINDER,particleCylinder:A.types.PARTICLE|A.types.CYLINDER,sphereTrimesh:A.types.SPHERE|A.types.TRIMESH,planeTrimesh:A.types.PLANE|A.types.TRIMESH};class _s{get[V.sphereSphere](){return this.sphereSphere}get[V.spherePlane](){return this.spherePlane}get[V.boxBox](){return this.boxBox}get[V.sphereBox](){return this.sphereBox}get[V.planeBox](){return this.planeBox}get[V.convexConvex](){return this.convexConvex}get[V.sphereConvex](){return this.sphereConvex}get[V.planeConvex](){return this.planeConvex}get[V.boxConvex](){return this.boxConvex}get[V.sphereHeightfield](){return this.sphereHeightfield}get[V.boxHeightfield](){return this.boxHeightfield}get[V.convexHeightfield](){return this.convexHeightfield}get[V.sphereParticle](){return this.sphereParticle}get[V.planeParticle](){return this.planeParticle}get[V.boxParticle](){return this.boxParticle}get[V.convexParticle](){return this.convexParticle}get[V.cylinderCylinder](){return this.convexConvex}get[V.sphereCylinder](){return this.sphereConvex}get[V.planeCylinder](){return this.planeConvex}get[V.boxCylinder](){return this.boxConvex}get[V.convexCylinder](){return this.convexConvex}get[V.heightfieldCylinder](){return this.heightfieldCylinder}get[V.particleCylinder](){return this.particleCylinder}get[V.sphereTrimesh](){return this.sphereTrimesh}get[V.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Rs,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,i,n,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new ms(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&i.collisionResponse;const c=this.currentContactMaterial;r.restitution=c.restitution,r.setSpookParams(c.contactEquationStiffness,c.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,d=i.material||e.material;return l&&d&&l.restitution>=0&&d.restitution>=0&&(r.restitution=l.restitution*d.restitution),r.si=n||s,r.sj=o||i,r}createFrictionEquationsFromContact(t,e){const s=t.bi,i=t.bj,n=t.si,o=t.sj,r=this.world,c=this.currentContactMaterial;let l=c.friction;const d=n.material||s.material,u=o.material||i.material;if(d&&u&&d.friction>=0&&u.friction>=0&&(l=d.friction*u.friction),l>0){const h=l*(r.frictionGravity||r.gravity).length();let f=s.invMass+i.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,y=p.length?p.pop():new ee(s,i,h*f),v=p.length?p.pop():new ee(s,i,h*f);return y.bi=v.bi=s,y.bj=v.bj=i,y.minForce=v.minForce=-h*f,y.maxForce=v.maxForce=h*f,y.ri.copy(t.ri),y.rj.copy(t.rj),v.ri.copy(t.ri),v.rj.copy(t.rj),t.ni.tangents(y.t,v.t),y.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),v.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),y.enabled=v.enabled=t.enabled,e.push(y,v),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],i=this.frictionResult[this.frictionResult.length-1];ct.setZero(),dt.setZero(),ut.setZero();const n=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==n?(ct.vadd(e.ni,ct),dt.vadd(e.ri,dt),ut.vadd(e.rj,ut)):(ct.vsub(e.ni,ct),dt.vadd(e.rj,dt),ut.vadd(e.ri,ut));const o=1/t;dt.scale(o,s.ri),ut.scale(o,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),ct.normalize(),ct.tangents(s.t,i.t)}getContacts(t,e,s,i,n,o,r){this.contactPointPool=n,this.frictionEquationPool=r,this.result=i,this.frictionResult=o;const c=ks,l=Ws,d=qs,u=Ls;for(let h=0,f=t.length;h!==f;h++){const p=t[h],y=e[h];let v=null;p.material&&y.material&&(v=s.getContactMaterial(p.material,y.material)||null);const w=p.type&P.KINEMATIC&&y.type&P.STATIC||p.type&P.STATIC&&y.type&P.KINEMATIC||p.type&P.KINEMATIC&&y.type&P.KINEMATIC;for(let m=0;m<p.shapes.length;m++){p.quaternion.mult(p.shapeOrientations[m],c),p.quaternion.vmult(p.shapeOffsets[m],d),d.vadd(p.position,d);const x=p.shapes[m];for(let g=0;g<y.shapes.length;g++){y.quaternion.mult(y.shapeOrientations[g],l),y.quaternion.vmult(y.shapeOffsets[g],u),u.vadd(y.position,u);const E=y.shapes[g];if(!(x.collisionFilterMask&E.collisionFilterGroup&&E.collisionFilterMask&x.collisionFilterGroup)||d.distanceTo(u)>x.boundingSphereRadius+E.boundingSphereRadius)continue;let C=null;x.material&&E.material&&(C=s.getContactMaterial(x.material,E.material)||null),this.currentContactMaterial=C||v||s.defaultContactMaterial;const B=x.type|E.type,T=this[B];if(T){let _=!1;x.type<E.type?_=T.call(this,x,E,d,u,c,l,p,y,x,E,w):_=T.call(this,E,x,u,d,l,c,y,p,x,E,w),_&&w&&(s.shapeOverlapKeeper.set(x.id,E.id),s.bodyOverlapKeeper.set(p.id,y.id))}}}}}sphereSphere(t,e,s,i,n,o,r,c,l,d,u){if(u)return s.distanceSquared(i)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,c,t,e,l,d);i.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(i,h.rj),h.rj.vsub(c.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,i,n,o,r,c,l,d,u){const h=this.createContactEquation(r,c,t,e,l,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(i,Ct),h.ni.scale(h.ni.dot(Ct),se),Ct.vsub(se,h.rj),-Ct.dot(h.ni)<=t.radius){if(u)return!0;const f=h.ri,p=h.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(i,p),p.vsub(c.position,p),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,i,n,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,i,n,o,r,c,t,e,u)}sphereBox(t,e,s,i,n,o,r,c,l,d,u){const h=this.v3pool,f=di;s.vsub(i,St),e.getSideNormals(f,o);const p=t.radius;let y=!1;const v=pi,w=fi,m=mi;let x=null,g=0,E=0,C=0,B=null;for(let z=0,j=f.length;z!==j&&y===!1;z++){const q=ci;q.copy(f[z]);const k=q.length();q.normalize();const X=St.dot(q);if(X<k+p&&X>0){const U=li,I=hi;U.copy(f[(z+1)%3]),I.copy(f[(z+2)%3]);const ht=U.length(),gt=I.length();U.normalize(),I.normalize();const Pt=St.dot(U),Nt=St.dot(I);if(Pt<ht&&Pt>-ht&&Nt<gt&&Nt>-gt){const Ot=Math.abs(X-k-p);if((B===null||Ot<B)&&(B=Ot,E=Pt,C=Nt,x=k,v.copy(q),w.copy(U),m.copy(I),g++,u))return!0}}}if(g){y=!0;const z=this.createContactEquation(r,c,t,e,l,d);v.scale(-p,z.ri),z.ni.copy(v),z.ni.negate(z.ni),v.scale(x,v),w.scale(E,w),v.vadd(w,v),m.scale(C,m),v.vadd(m,z.rj),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.vadd(i,z.rj),z.rj.vsub(c.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}let T=h.get();const _=ui;for(let z=0;z!==2&&!y;z++)for(let j=0;j!==2&&!y;j++)for(let q=0;q!==2&&!y;q++)if(T.set(0,0,0),z?T.vadd(f[0],T):T.vsub(f[0],T),j?T.vadd(f[1],T):T.vsub(f[1],T),q?T.vadd(f[2],T):T.vsub(f[2],T),i.vadd(T,_),_.vsub(s,_),_.lengthSquared()<p*p){if(u)return!0;y=!0;const k=this.createContactEquation(r,c,t,e,l,d);k.ri.copy(_),k.ri.normalize(),k.ni.copy(k.ri),k.ri.scale(p,k.ri),k.rj.copy(T),k.ri.vadd(s,k.ri),k.ri.vsub(r.position,k.ri),k.rj.vadd(i,k.rj),k.rj.vsub(c.position,k.rj),this.result.push(k),this.createFrictionEquationsFromContact(k,this.frictionResult)}h.release(T),T=null;const N=h.get(),R=h.get(),L=h.get(),b=h.get(),M=h.get(),S=f.length;for(let z=0;z!==S&&!y;z++)for(let j=0;j!==S&&!y;j++)if(z%3!==j%3){f[j].cross(f[z],N),N.normalize(),f[z].vadd(f[j],R),L.copy(s),L.vsub(R,L),L.vsub(i,L);const q=L.dot(N);N.scale(q,b);let k=0;for(;k===z%3||k===j%3;)k++;M.copy(s),M.vsub(b,M),M.vsub(R,M),M.vsub(i,M);const X=Math.abs(q),U=M.length();if(X<f[k].length()&&U<p){if(u)return!0;y=!0;const I=this.createContactEquation(r,c,t,e,l,d);R.vadd(b,I.rj),I.rj.copy(I.rj),M.negate(I.ni),I.ni.normalize(),I.ri.copy(I.rj),I.ri.vadd(i,I.ri),I.ri.vsub(s,I.ri),I.ri.normalize(),I.ri.scale(p,I.ri),I.ri.vadd(s,I.ri),I.ri.vsub(r.position,I.ri),I.rj.vadd(i,I.rj),I.rj.vsub(c.position,I.rj),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult)}}h.release(N,R,L,b,M)}planeBox(t,e,s,i,n,o,r,c,l,d,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,i,n,o,r,c,t,e,u)}convexConvex(t,e,s,i,n,o,r,c,l,d,u,h,f){const p=Ni;if(!(s.distanceTo(i)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,n,i,o,p,h,f)){const y=[],v=Ti;t.clipAgainstHull(s,n,e,i,o,p,-100,100,y);let w=0;for(let m=0;m!==y.length;m++){if(u)return!0;const x=this.createContactEquation(r,c,t,e,l,d),g=x.ri,E=x.rj;p.negate(x.ni),y[m].normal.negate(v),v.scale(y[m].depth,v),y[m].point.vadd(v,g),E.copy(y[m].point),g.vsub(s,g),E.vsub(i,E),g.vadd(s,g),g.vsub(r.position,g),E.vadd(i,E),E.vsub(c.position,E),this.result.push(x),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,i,n,o,r,c,l,d,u){const h=this.v3pool;s.vsub(i,vi);const f=e.faceNormals,p=e.faces,y=e.vertices,v=t.radius;let w=!1;for(let m=0;m!==y.length;m++){const x=y[m],g=gi;o.vmult(x,g),i.vadd(g,g);const E=xi;if(g.vsub(s,E),E.lengthSquared()<v*v){if(u)return!0;w=!0;const C=this.createContactEquation(r,c,t,e,l,d);C.ri.copy(E),C.ri.normalize(),C.ni.copy(C.ri),C.ri.scale(v,C.ri),g.vsub(i,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(i,C.rj),C.rj.vsub(c.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult);return}}for(let m=0,x=p.length;m!==x&&w===!1;m++){const g=f[m],E=p[m],C=bi;o.vmult(g,C);const B=Ei;o.vmult(y[E[0]],B),B.vadd(i,B);const T=zi;C.scale(-v,T),s.vadd(T,T);const _=Ci;T.vsub(B,_);const N=_.dot(C),R=Si;if(s.vsub(B,R),N<0&&R.dot(C)>0){const L=[];for(let b=0,M=E.length;b!==M;b++){const S=h.get();o.vmult(y[E[b]],S),i.vadd(S,S),L.push(S)}if(ai(L,C,s)){if(u)return!0;w=!0;const b=this.createContactEquation(r,c,t,e,l,d);C.scale(-v,b.ri),C.negate(b.ni);const M=h.get();C.scale(-N,M);const S=h.get();C.scale(-v,S),s.vsub(i,b.rj),b.rj.vadd(S,b.rj),b.rj.vadd(M,b.rj),b.rj.vadd(i,b.rj),b.rj.vsub(c.position,b.rj),b.ri.vadd(s,b.ri),b.ri.vsub(r.position,b.ri),h.release(M),h.release(S),this.result.push(b),this.createFrictionEquationsFromContact(b,this.frictionResult);for(let z=0,j=L.length;z!==j;z++)h.release(L[z]);return}else for(let b=0;b!==E.length;b++){const M=h.get(),S=h.get();o.vmult(y[E[(b+1)%E.length]],M),o.vmult(y[E[(b+2)%E.length]],S),i.vadd(M,M),i.vadd(S,S);const z=yi;S.vsub(M,z);const j=wi;z.unit(j);const q=h.get(),k=h.get();s.vsub(M,k);const X=k.dot(j);j.scale(X,q),q.vadd(M,q);const U=h.get();if(q.vsub(s,U),X>0&&X*X<z.lengthSquared()&&U.lengthSquared()<v*v){if(u)return!0;const I=this.createContactEquation(r,c,t,e,l,d);q.vsub(i,I.rj),q.vsub(s,I.ni),I.ni.normalize(),I.ni.scale(v,I.ri),I.rj.vadd(i,I.rj),I.rj.vsub(c.position,I.rj),I.ri.vadd(s,I.ri),I.ri.vsub(r.position,I.ri),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult);for(let ht=0,gt=L.length;ht!==gt;ht++)h.release(L[ht]);h.release(M),h.release(S),h.release(q),h.release(U),h.release(k);return}h.release(M),h.release(S),h.release(q),h.release(U),h.release(k)}for(let b=0,M=L.length;b!==M;b++)h.release(L[b])}}}planeConvex(t,e,s,i,n,o,r,c,l,d,u){const h=Mi,f=Ai;f.set(0,0,1),n.vmult(f,f);let p=0;const y=Bi;for(let v=0;v!==e.vertices.length;v++)if(h.copy(e.vertices[v]),o.vmult(h,h),i.vadd(h,h),h.vsub(s,y),f.dot(y)<=0){if(u)return!0;const m=this.createContactEquation(r,c,t,e,l,d),x=Pi;f.scale(f.dot(y),x),h.vsub(x,x),x.vsub(s,m.ri),m.ni.copy(f),h.vsub(i,m.rj),m.ri.vadd(s,m.ri),m.ri.vsub(r.position,m.ri),m.rj.vadd(i,m.rj),m.rj.vsub(c.position,m.rj),this.result.push(m),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(m,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,i,n,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,i,n,o,r,c,t,e,u)}sphereHeightfield(t,e,s,i,n,o,r,c,l,d,u){const h=e.data,f=t.radius,p=e.elementSize,y=Gi,v=ji;O.pointToLocalFrame(i,o,s,v);let w=Math.floor((v.x-f)/p)-1,m=Math.ceil((v.x+f)/p)+1,x=Math.floor((v.y-f)/p)-1,g=Math.ceil((v.y+f)/p)+1;if(m<0||g<0||w>h.length||x>h[0].length)return;w<0&&(w=0),m<0&&(m=0),x<0&&(x=0),g<0&&(g=0),w>=h.length&&(w=h.length-1),m>=h.length&&(m=h.length-1),g>=h[0].length&&(g=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const E=[];e.getRectMinMax(w,x,m,g,E);const C=E[0],B=E[1];if(v.z-f>B||v.z+f<C)return;const T=this.result;for(let _=w;_<m;_++)for(let N=x;N<g;N++){const R=T.length;let L=!1;if(e.getConvexTrianglePillar(_,N,!1),O.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(L=this.sphereConvex(t,e.pillarConvex,s,y,n,o,r,c,t,e,u)),u&&L||(e.getConvexTrianglePillar(_,N,!0),O.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(L=this.sphereConvex(t,e.pillarConvex,s,y,n,o,r,c,t,e,u)),u&&L))return!0;if(T.length-R>2)return}}boxHeightfield(t,e,s,i,n,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,i,n,o,r,c,t,e,u)}convexHeightfield(t,e,s,i,n,o,r,c,l,d,u){const h=e.data,f=e.elementSize,p=t.boundingSphereRadius,y=Oi,v=Vi,w=Wi;O.pointToLocalFrame(i,o,s,w);let m=Math.floor((w.x-p)/f)-1,x=Math.ceil((w.x+p)/f)+1,g=Math.floor((w.y-p)/f)-1,E=Math.ceil((w.y+p)/f)+1;if(x<0||E<0||m>h.length||g>h[0].length)return;m<0&&(m=0),x<0&&(x=0),g<0&&(g=0),E<0&&(E=0),m>=h.length&&(m=h.length-1),x>=h.length&&(x=h.length-1),E>=h[0].length&&(E=h[0].length-1),g>=h[0].length&&(g=h[0].length-1);const C=[];e.getRectMinMax(m,g,x,E,C);const B=C[0],T=C[1];if(!(w.z-p>T||w.z+p<B))for(let _=m;_<x;_++)for(let N=g;N<E;N++){let R=!1;if(e.getConvexTrianglePillar(_,N,!1),O.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,y,n,o,r,c,null,null,u,v,null)),u&&R||(e.getConvexTrianglePillar(_,N,!0),O.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,y,n,o,r,c,null,null,u,v,null)),u&&R))return!0}}sphereParticle(t,e,s,i,n,o,r,c,l,d,u){const h=_i;if(h.set(0,0,1),i.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(c,r,e,t,l,d);h.normalize(),p.rj.copy(h),p.rj.scale(t.radius,p.rj),p.ni.copy(h),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,i,n,o,r,c,l,d,u){const h=Fi;h.set(0,0,1),r.quaternion.vmult(h,h);const f=Ii;if(i.vsub(r.position,f),h.dot(f)<=0){if(u)return!0;const y=this.createContactEquation(c,r,e,t,l,d);y.ni.copy(h),y.ni.negate(y.ni),y.ri.set(0,0,0);const v=Ri;h.scale(h.dot(i),v),i.vsub(v,v),y.rj.copy(v),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}boxParticle(t,e,s,i,n,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,i,n,o,r,c,t,e,u)}convexParticle(t,e,s,i,n,o,r,c,l,d,u){let h=-1;const f=Li,p=ki;let y=null;const v=qi;if(v.copy(i),v.vsub(s,v),n.conjugate(ie),ie.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,n),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(n);for(let w=0,m=t.faces.length;w!==m;w++){const x=[t.worldVertices[t.faces[w][0]]],g=t.worldFaceNormals[w];i.vsub(x[0],ne);const E=-g.dot(ne);if(y===null||Math.abs(E)<Math.abs(y)){if(u)return!0;y=E,h=w,f.copy(g)}}if(h!==-1){const w=this.createContactEquation(c,r,e,t,l,d);f.scale(y,p),p.vadd(i,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const m=w.ri,x=w.rj;m.vadd(i,m),m.vsub(c.position,m),x.vadd(s,x),x.vsub(r.position,x),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,i,n,o,r,c,l,d,u){return this.convexHeightfield(e,t,i,s,o,n,c,r,l,d,u)}particleCylinder(t,e,s,i,n,o,r,c,l,d,u){return this.convexParticle(e,t,i,s,o,n,c,r,l,d,u)}sphereTrimesh(t,e,s,i,n,o,r,c,l,d,u){const h=Us,f=Xs,p=$s,y=Ks,v=Zs,w=Qs,m=si,x=Ys,g=Hs,E=ii;O.pointToLocalFrame(i,o,s,v);const C=t.radius;m.lowerBound.set(v.x-C,v.y-C,v.z-C),m.upperBound.set(v.x+C,v.y+C,v.z+C),e.getTrianglesInAABB(m,E);const B=Ds,T=t.radius*t.radius;for(let b=0;b<E.length;b++)for(let M=0;M<3;M++)if(e.getVertex(e.indices[E[b]*3+M],B),B.vsub(v,g),g.lengthSquared()<=T){if(x.copy(B),O.pointToWorldFrame(i,o,x,B),B.vsub(s,g),u)return!0;let S=this.createContactEquation(r,c,t,e,l,d);S.ni.copy(g),S.ni.normalize(),S.ri.copy(S.ni),S.ri.scale(t.radius,S.ri),S.ri.vadd(s,S.ri),S.ri.vsub(r.position,S.ri),S.rj.copy(B),S.rj.vsub(c.position,S.rj),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}for(let b=0;b<E.length;b++)for(let M=0;M<3;M++){e.getVertex(e.indices[E[b]*3+M],h),e.getVertex(e.indices[E[b]*3+(M+1)%3],f),f.vsub(h,p),v.vsub(f,w);const S=w.dot(p);v.vsub(h,w);let z=w.dot(p);if(z>0&&S<0&&(v.vsub(h,w),y.copy(p),y.normalize(),z=w.dot(y),y.scale(z,w),w.vadd(h,w),w.distanceTo(v)<t.radius)){if(u)return!0;const q=this.createContactEquation(r,c,t,e,l,d);w.vsub(v,q.ni),q.ni.normalize(),q.ni.scale(t.radius,q.ri),q.ri.vadd(s,q.ri),q.ri.vsub(r.position,q.ri),O.pointToWorldFrame(i,o,w,w),w.vsub(c.position,q.rj),O.vectorToWorldFrame(o,q.ni,q.ni),O.vectorToWorldFrame(o,q.ri,q.ri),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult)}}const _=Js,N=ti,R=ei,L=Gs;for(let b=0,M=E.length;b!==M;b++){e.getTriangleVertices(E[b],_,N,R),e.getNormal(E[b],L),v.vsub(_,w);let S=w.dot(L);if(L.scale(S,w),v.vsub(w,w),S=w.distanceTo(v),H.pointInTriangle(w,_,N,R)&&S<t.radius){if(u)return!0;let z=this.createContactEquation(r,c,t,e,l,d);w.vsub(v,z.ni),z.ni.normalize(),z.ni.scale(t.radius,z.ri),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),O.pointToWorldFrame(i,o,w,w),w.vsub(c.position,z.rj),O.vectorToWorldFrame(o,z.ni,z.ni),O.vectorToWorldFrame(o,z.ri,z.ri),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}}E.length=0}planeTrimesh(t,e,s,i,n,o,r,c,l,d,u){const h=new a,f=Os;f.set(0,0,1),n.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,h);const y=new a;y.copy(h),O.pointToWorldFrame(i,o,y,h);const v=Vs;if(h.vsub(s,v),f.dot(v)<=0){if(u)return!0;const m=this.createContactEquation(r,c,t,e,l,d);m.ni.copy(f);const x=js;f.scale(v.dot(f),x),h.vsub(x,x),m.ri.copy(x),m.ri.vsub(r.position,m.ri),m.rj.copy(h),m.rj.vsub(c.position,m.rj),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}}}const ct=new a,dt=new a,ut=new a,qs=new a,Ls=new a,ks=new D,Ws=new D,Os=new a,Vs=new a,js=new a,Gs=new a,Hs=new a;new a;const Ds=new a,Ys=new a,Us=new a,Xs=new a,$s=new a,Ks=new a,Zs=new a,Qs=new a,Js=new a,ti=new a,ei=new a,si=new K,ii=[],Ct=new a,se=new a,ni=new a,oi=new a,ri=new a;function ai(F,t,e){let s=null;const i=F.length;for(let n=0;n!==i;n++){const o=F[n],r=ni;F[(n+1)%i].vsub(o,r);const c=oi;r.cross(t,c);const l=ri;e.vsub(o,l);const d=c.dot(l);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const St=new a,ci=new a,li=new a,hi=new a,di=[new a,new a,new a,new a,new a,new a],ui=new a,pi=new a,fi=new a,mi=new a,vi=new a,yi=new a,wi=new a,xi=new a,gi=new a,bi=new a,Ei=new a,zi=new a,Ci=new a,Si=new a;new a;new a;const Mi=new a,Ai=new a,Bi=new a,Pi=new a,Ni=new a,Ti=new a,Fi=new a,Ii=new a,Ri=new a,_i=new a,ie=new D,qi=new a;new a;const Li=new a,ne=new a,ki=new a,Wi=new a,Oi=new a,Vi=[0],ji=new a,Gi=new a;class oe{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),i=this.current;let n=0;for(;s>i[n];)n++;if(s!==i[n]){for(let o=i.length-1;o>=n;o--)i[o+1]=i[o];i[n]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,i=this.previous,n=s.length,o=i.length;let r=0;for(let c=0;c<n;c++){let l=!1;const d=s[c];for(;d>i[r];)r++;l=d===i[r],l||re(t,d)}r=0;for(let c=0;c<o;c++){let l=!1;const d=i[c];for(;d>s[r];)r++;l=s[r]===d,l||re(e,d)}}}function re(F,t){F.push((t&4294901760)>>16,t&65535)}const _t=(F,t)=>F<t?`${F}-${t}`:`${t}-${F}`;class Hi{constructor(){this.data={keys:[]}}get(t,e){const s=_t(t,e);return this.data[s]}set(t,e,s){const i=_t(t,e);this.get(t,e)||this.data.keys.push(i),this.data[i]=s}delete(t,e){const s=_t(t,e),i=this.data.keys.indexOf(s);i!==-1&&this.data.keys.splice(i,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class Di extends ae{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new a,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new a,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new he,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new Ps,this.constraints=[],this.narrowphase=new _s(this),this.collisionMatrix=new Dt,this.collisionMatrixPrevious=new Dt,this.bodyOverlapKeeper=new oe,this.shapeOverlapKeeper=new oe,this.contactmaterials=[],this.contactMaterialTable=new Hi,this.defaultMaterial=new xt("default"),this.defaultContactMaterial=new At(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Mt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,i){return s===void 0&&(s={}),s.mode=H.ALL,s.from=t,s.to=e,s.callback=i,qt.intersectWorld(this,s)}raycastAny(t,e,s,i){return s===void 0&&(s={}),s.mode=H.ANY,s.from=t,s.to=e,s.result=i,qt.intersectWorld(this,s)}raycastClosest(t,e,s,i){return s===void 0&&(s={}),s.mode=H.CLOSEST,s.from=t,s.to=e,s.result=i,qt.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof P&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,i=s.indexOf(t);if(i!==-1){s.splice(i,1);for(let n=0;n!==s.length;n++)s[n].index=n;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const i=e[s].shapes;for(let n=0;n<i.length;n++){const o=i[n];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=Y.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const i=s-this.lastCallTime;this.step(t,i,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const i=Y.now();let n=0;for(;this.accumulator>=t&&n<s&&(this.internalStep(t),this.accumulator-=t,n++,!(Y.now()-i>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const c=this.bodies[r];c.previousPosition.lerp(c.position,o,c.interpolatedPosition),c.previousQuaternion.slerp(c.quaternion,o,c.interpolatedQuaternion),c.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=Ki,i=Zi,n=this.bodies.length,o=this.bodies,r=this.solver,c=this.gravity,l=this.doProfiling,d=this.profile,u=P.DYNAMIC;let h=-1/0;const f=this.constraints,p=$i;c.length();const y=c.x,v=c.y,w=c.z;let m=0;for(l&&(h=Y.now()),m=0;m!==n;m++){const b=o[m];if(b.type===u){const M=b.force,S=b.mass;M.x+=S*y,M.y+=S*v,M.z+=S*w}}for(let b=0,M=this.subsystems.length;b!==M;b++)this.subsystems[b].update();l&&(h=Y.now()),s.length=0,i.length=0,this.broadphase.collisionPairs(this,s,i),l&&(d.broadphase=Y.now()-h);let x=f.length;for(m=0;m!==x;m++){const b=f[m];if(!b.collideConnected)for(let M=s.length-1;M>=0;M-=1)(b.bodyA===s[M]&&b.bodyB===i[M]||b.bodyB===s[M]&&b.bodyA===i[M])&&(s.splice(M,1),i.splice(M,1))}this.collisionMatrixTick(),l&&(h=Y.now());const g=Xi,E=e.length;for(m=0;m!==E;m++)g.push(e[m]);e.length=0;const C=this.frictionEquations.length;for(m=0;m!==C;m++)p.push(this.frictionEquations[m]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,i,this,e,g,this.frictionEquations,p),l&&(d.narrowphase=Y.now()-h),l&&(h=Y.now()),m=0;m<this.frictionEquations.length;m++)r.addEquation(this.frictionEquations[m]);const B=e.length;for(let b=0;b!==B;b++){const M=e[b],S=M.bi,z=M.bj,j=M.si,q=M.sj;let k;if(S.material&&z.material?k=this.getContactMaterial(S.material,z.material)||this.defaultContactMaterial:k=this.defaultContactMaterial,k.friction,S.material&&z.material&&(S.material.friction>=0&&z.material.friction>=0&&S.material.friction*z.material.friction,S.material.restitution>=0&&z.material.restitution>=0&&(M.restitution=S.material.restitution*z.material.restitution)),r.addEquation(M),S.allowSleep&&S.type===P.DYNAMIC&&S.sleepState===P.SLEEPING&&z.sleepState===P.AWAKE&&z.type!==P.STATIC){const X=z.velocity.lengthSquared()+z.angularVelocity.lengthSquared(),U=z.sleepSpeedLimit**2;X>=U*2&&(S.wakeUpAfterNarrowphase=!0)}if(z.allowSleep&&z.type===P.DYNAMIC&&z.sleepState===P.SLEEPING&&S.sleepState===P.AWAKE&&S.type!==P.STATIC){const X=S.velocity.lengthSquared()+S.angularVelocity.lengthSquared(),U=S.sleepSpeedLimit**2;X>=U*2&&(z.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(S,z,!0),this.collisionMatrixPrevious.get(S,z)||(ft.body=z,ft.contact=M,S.dispatchEvent(ft),ft.body=S,z.dispatchEvent(ft)),this.bodyOverlapKeeper.set(S.id,z.id),this.shapeOverlapKeeper.set(j.id,q.id)}for(this.emitContactEvents(),l&&(d.makeContactConstraints=Y.now()-h,h=Y.now()),m=0;m!==n;m++){const b=o[m];b.wakeUpAfterNarrowphase&&(b.wakeUp(),b.wakeUpAfterNarrowphase=!1)}for(x=f.length,m=0;m!==x;m++){const b=f[m];b.update();for(let M=0,S=b.equations.length;M!==S;M++){const z=b.equations[M];r.addEquation(z)}}r.solve(t,this),l&&(d.solve=Y.now()-h),r.removeAllEquations();const T=Math.pow;for(m=0;m!==n;m++){const b=o[m];if(b.type&u){const M=T(1-b.linearDamping,t),S=b.velocity;S.scale(M,S);const z=b.angularVelocity;if(z){const j=T(1-b.angularDamping,t);z.scale(j,z)}}}this.dispatchEvent(Ui),l&&(h=Y.now());const N=this.stepnumber%(this.quatNormalizeSkip+1)===0,R=this.quatNormalizeFast;for(m=0;m!==n;m++)o[m].integrate(t,N,R);this.clearForces(),this.broadphase.dirty=!0,l&&(d.integrate=Y.now()-h),this.stepnumber+=1,this.dispatchEvent(Yi);let L=!0;if(this.allowSleep)for(L=!1,m=0;m!==n;m++){const b=o[m];b.sleepTick(this.time),b.sleepState!==P.SLEEPING&&(L=!0)}this.hasActiveBodies=L}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(it,nt),t){for(let n=0,o=it.length;n<o;n+=2)mt.bodyA=this.getBodyById(it[n]),mt.bodyB=this.getBodyById(it[n+1]),this.dispatchEvent(mt);mt.bodyA=mt.bodyB=null}if(e){for(let n=0,o=nt.length;n<o;n+=2)vt.bodyA=this.getBodyById(nt[n]),vt.bodyB=this.getBodyById(nt[n+1]),this.dispatchEvent(vt);vt.bodyA=vt.bodyB=null}it.length=nt.length=0;const s=this.hasAnyEventListener("beginShapeContact"),i=this.hasAnyEventListener("endShapeContact");if((s||i)&&this.shapeOverlapKeeper.getDiff(it,nt),s){for(let n=0,o=it.length;n<o;n+=2){const r=this.getShapeById(it[n]),c=this.getShapeById(it[n+1]);ot.shapeA=r,ot.shapeB=c,r&&(ot.bodyA=r.body),c&&(ot.bodyB=c.body),this.dispatchEvent(ot)}ot.bodyA=ot.bodyB=ot.shapeA=ot.shapeB=null}if(i){for(let n=0,o=nt.length;n<o;n+=2){const r=this.getShapeById(nt[n]),c=this.getShapeById(nt[n+1]);rt.shapeA=r,rt.shapeB=c,r&&(rt.bodyA=r.body),c&&(rt.bodyB=c.body),this.dispatchEvent(rt)}rt.bodyA=rt.bodyB=rt.shapeA=rt.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const i=t[s];i.force,i.torque,i.force.set(0,0,0),i.torque.set(0,0,0)}}}new K;const qt=new H,Y=globalThis.performance||{};if(!Y.now){let F=Date.now();Y.timing&&Y.timing.navigationStart&&(F=Y.timing.navigationStart),Y.now=()=>Date.now()-F}new a;const Yi={type:"postStep"},Ui={type:"preStep"},ft={type:P.COLLIDE_EVENT_NAME,body:null,contact:null},Xi=[],$i=[],Ki=[],Zi=[],it=[],nt=[],mt={type:"beginContact",bodyA:null,bodyB:null},vt={type:"endContact",bodyA:null,bodyB:null},ot={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},rt={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};class Qi{constructor(t){W(this,"scene");W(this,"world");W(this,"bodies");W(this,"meshes");this.scene=t,this.world=new Di,this.bodies=new Map,this.meshes=new Map,this.world.gravity.set(0,-9.82,0),this.world.broadphase=new he,this.world.solver.iterations=20}addBody(...t){t.forEach(e=>{this.scene.add(e.mesh),this.world.addBody(e.body),this.bodies.set(e.mesh.uuid,e.body),this.meshes.set(e.body.id,e.mesh)})}update(t){this.world.step(t),this.bodies.forEach(e=>{const s=this.meshes.get(e.id);s&&(s.position.copy(e.position),s.quaternion.copy(e.quaternion))})}}class Ji{constructor({size:t=4,position:e={x:0,y:20,z:0},rotation:s={pitch:0,yaw:0,roll:0}}={}){W(this,"mesh");W(this,"body");const i=new G.BoxGeometry(t,t,t),n=new G.MeshStandardMaterial({color:65280});this.mesh=new G.Mesh(i,n);const o=new ce(new a(t/2,t/2,t/2));this.body=new P({mass:1,shape:o,material:new xt({friction:.3,restitution:.7})}),this.body.position.set(e.x,e.y,e.z),this.body.quaternion.setFromEuler((s==null?void 0:s.pitch)||0,(s==null?void 0:s.yaw)||0,(s==null?void 0:s.roll)||0,"XYZ"),this.mesh.position.copy(this.body.position),this.mesh.quaternion.copy(this.body.quaternion)}}class tn{constructor(){W(this,"mesh");W(this,"body");const t=new G.PlaneGeometry(1e3,1e3),e=new G.MeshStandardMaterial({color:8947848});this.mesh=new G.Mesh(t,e),this.mesh.rotation.x=-Math.PI/2,this.mesh.receiveShadow=!0;const s=new As;this.body=new P({mass:0}),this.body.addShape(s),this.body.quaternion.setFromAxisAngle(new a(1,0,0),-Math.PI/2)}}class Bt extends ge{constructor(){const t=Bt.SkyShader,e=new be({name:t.name,uniforms:ze.clone(t.uniforms),vertexShader:t.vertexShader,fragmentShader:t.fragmentShader,side:Ee,depthWrite:!1});super(new Ce(1,1,1),e),this.isSky=!0}}Bt.SkyShader={name:"SkyShader",uniforms:{turbidity:{value:2},rayleigh:{value:1},mieCoefficient:{value:.005},mieDirectionalG:{value:.8},sunPosition:{value:new Vt},up:{value:new Vt(0,1,0)}},vertexShader:`
		uniform vec3 sunPosition;
		uniform float rayleigh;
		uniform float turbidity;
		uniform float mieCoefficient;
		uniform vec3 up;

		varying vec3 vWorldPosition;
		varying vec3 vSunDirection;
		varying float vSunfade;
		varying vec3 vBetaR;
		varying vec3 vBetaM;
		varying float vSunE;

		// constants for atmospheric scattering
		const float e = 2.71828182845904523536028747135266249775724709369995957;
		const float pi = 3.141592653589793238462643383279502884197169;

		// wavelength of used primaries, according to preetham
		const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );
		// this pre-calculation replaces older TotalRayleigh(vec3 lambda) function:
		// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))
		const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );

		// mie stuff
		// K coefficient for the primaries
		const float v = 4.0;
		const vec3 K = vec3( 0.686, 0.678, 0.666 );
		// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K
		const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );

		// earth shadow hack
		// cutoffAngle = pi / 1.95;
		const float cutoffAngle = 1.6110731556870734;
		const float steepness = 1.5;
		const float EE = 1000.0;

		float sunIntensity( float zenithAngleCos ) {
			zenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );
			return EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );
		}

		vec3 totalMie( float T ) {
			float c = ( 0.2 * T ) * 10E-18;
			return 0.434 * c * MieConst;
		}

		void main() {

			vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
			vWorldPosition = worldPosition.xyz;

			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
			gl_Position.z = gl_Position.w; // set z to camera.far

			vSunDirection = normalize( sunPosition );

			vSunE = sunIntensity( dot( vSunDirection, up ) );

			vSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );

			float rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );

			// extinction (absorption + out scattering)
			// rayleigh coefficients
			vBetaR = totalRayleigh * rayleighCoefficient;

			// mie coefficients
			vBetaM = totalMie( turbidity ) * mieCoefficient;

		}`,fragmentShader:`
		varying vec3 vWorldPosition;
		varying vec3 vSunDirection;
		varying float vSunfade;
		varying vec3 vBetaR;
		varying vec3 vBetaM;
		varying float vSunE;

		uniform float mieDirectionalG;
		uniform vec3 up;

		// constants for atmospheric scattering
		const float pi = 3.141592653589793238462643383279502884197169;

		const float n = 1.0003; // refractive index of air
		const float N = 2.545E25; // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)

		// optical length at zenith for molecules
		const float rayleighZenithLength = 8.4E3;
		const float mieZenithLength = 1.25E3;
		// 66 arc seconds -> degrees, and the cosine of that
		const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;

		// 3.0 / ( 16.0 * pi )
		const float THREE_OVER_SIXTEENPI = 0.05968310365946075;
		// 1.0 / ( 4.0 * pi )
		const float ONE_OVER_FOURPI = 0.07957747154594767;

		float rayleighPhase( float cosTheta ) {
			return THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );
		}

		float hgPhase( float cosTheta, float g ) {
			float g2 = pow( g, 2.0 );
			float inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );
			return ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );
		}

		void main() {

			vec3 direction = normalize( vWorldPosition - cameraPosition );

			// optical length
			// cutoff angle at 90 to avoid singularity in next formula.
			float zenithAngle = acos( max( 0.0, dot( up, direction ) ) );
			float inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );
			float sR = rayleighZenithLength * inverse;
			float sM = mieZenithLength * inverse;

			// combined extinction factor
			vec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );

			// in scattering
			float cosTheta = dot( direction, vSunDirection );

			float rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );
			vec3 betaRTheta = vBetaR * rPhase;

			float mPhase = hgPhase( cosTheta, mieDirectionalG );
			vec3 betaMTheta = vBetaM * mPhase;

			vec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );
			Lin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );

			// nightsky
			float theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]
			float phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]
			vec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );
			vec3 L0 = vec3( 0.1 ) * Fex;

			// composition + solar disc
			float sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );
			L0 += ( vSunE * 19000.0 * Fex ) * sundisk;

			vec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );

			vec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );

			gl_FragColor = vec4( retColor, 1.0 );

			#include <tonemapping_fragment>
			#include <colorspace_fragment>

		}`};class en{constructor(){W(this,"scene");W(this,"camera");W(this,"renderer");W(this,"physicsWorld");W(this,"clock");this.scene=new G.Scene,this.camera=new G.PerspectiveCamera(60,window.innerWidth/window.innerHeight,.1,1e3),this.renderer=new G.WebGLRenderer({antialias:!0}),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=G.PCFSoftShadowMap,this.physicsWorld=new Qi(this.scene),this.clock=new G.Clock,this.init()}init(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.setPixelRatio(window.devicePixelRatio),this.physicsWorld.addBody(...Array.from({length:10}).map((c,l)=>new Ji({size:.5+2*Math.random(),position:{x:0+5*Math.random(),y:20+l*10,z:0},rotation:{pitch:Math.PI*Math.random(),yaw:0,roll:0}})),new tn);const t=new G.HemisphereLight(16777147,526368,.6),e=new G.DirectionalLight(16777215,1.2),s=new Bt;s.scale.setScalar(1e3),this.scene.add(s);const i=s.material.uniforms;i.turbidity.value=5,i.rayleigh.value=1.5,i.mieCoefficient.value=.005,i.mieDirectionalG.value=.8;const n=new G.Vector3,o=G.MathUtils.degToRad(90),r=G.MathUtils.degToRad(180);n.setFromSphericalCoords(1,o,r),e.position.copy(n),i.sunPosition.value.copy(n),this.scene.add(t,e)}update(){const t=this.clock.getDelta();this.physicsWorld.update(t)}render(){this.renderer.render(this.scene,this.camera)}onWindowResize(){const t=window.innerWidth,e=window.innerHeight;this.camera.aspect=t/e,this.camera.updateProjectionMatrix(),this.renderer.setSize(t,e)}}class sn{constructor({position:t}){W(this,"mesh");W(this,"body");this.mesh=new G.Mesh(new G.SphereGeometry(2),new G.MeshStandardMaterial),this.body=new P({mass:0,shape:new Ms(2),position:new a(t.x,t.y,t.z)}),this.mesh.visible=!1,this.mesh.position.copy(this.body.position),this.mesh.quaternion.copy(this.body.quaternion)}}class nn{constructor(t,e){W(this,"sceneManager");W(this,"camera");W(this,"moveSpeed");W(this,"lookSpeed");W(this,"pitch");W(this,"yaw");W(this,"locked",!1);W(this,"keys",{});W(this,"cameraBody",null);this.sceneManager=e,this.camera=t,this.moveSpeed=.1,this.lookSpeed=.002,this.camera.position.set(10,1.7,-10),this.camera.lookAt(0,0,0);const s=new G.Euler().setFromQuaternion(this.camera.quaternion,"YXZ");this.pitch=s.x,this.yaw=s.y,this.setupEventListeners(),this.initCameraBody()}initCameraBody(){this.cameraBody=new sn({position:this.camera.position}),this.sceneManager.physicsWorld.addBody(this.cameraBody)}update(){const t=new G.Vector3(0,0,-1);t.applyQuaternion(this.camera.quaternion),t.y=0,t.normalize();const e=new G.Vector3(1,0,0);e.applyQuaternion(this.camera.quaternion),e.y=0,e.normalize(),this.keys.w&&this.camera.position.add(t.multiplyScalar(this.moveSpeed)),this.keys.s&&this.camera.position.add(t.multiplyScalar(-this.moveSpeed)),this.keys.a&&this.camera.position.add(e.multiplyScalar(-this.moveSpeed)),this.keys.d&&this.camera.position.add(e.multiplyScalar(this.moveSpeed)),this.cameraBody&&this.cameraBody.body.position.copy(new a(this.camera.position.x,this.camera.position.y,this.camera.position.z))}onWindowResize(){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix()}onMouseMove(t){this.locked&&(this.yaw-=t.movementX*this.lookSpeed,this.pitch-=t.movementY*this.lookSpeed,this.pitch=Math.max(-Math.PI/2,Math.min(Math.PI/2,this.pitch)),this.camera.quaternion.setFromEuler(new G.Euler(this.pitch,this.yaw,0,"YXZ")),this.cameraBody&&this.cameraBody.body.position.copy(new a(this.camera.position.x,this.camera.position.y,this.camera.position.z)))}setKeyState(t,e){this.keys[t]=e}setupEventListeners(){document.addEventListener("keydown",t=>{this.locked&&this.setKeyState(t.key,!0)}),document.addEventListener("keyup",t=>{this.locked&&this.setKeyState(t.key,!1)}),document.addEventListener("pointerlockchange",()=>{this.locked=!!document.pointerLockElement}),document.addEventListener("mousemove",this.onMouseMove.bind(this)),document.addEventListener("click",()=>{document.pointerLockElement||this.sceneManager.renderer.domElement.requestPointerLock()})}}class on{constructor(){W(this,"startTime");W(this,"frames");W(this,"dom");this.startTime=Date.now(),this.frames=0,this.dom=document.createElement("div"),this.dom.classList.add("stats")}update(){this.frames++;const t=Date.now()-this.startTime;if(t>=1e3){const e=this.frames/t*1e3;this.dom.textContent=`FPS: ${e.toFixed(2)}`,this.startTime=Date.now(),this.frames=0}}}class rn{constructor(){W(this,"sceneManager");W(this,"camera");W(this,"stats");this.sceneManager=new en,this.camera=new nn(this.sceneManager.camera,this.sceneManager),this.stats=new on,this.init(),this.animate()}init(){document.body.appendChild(this.sceneManager.renderer.domElement),document.body.appendChild(this.stats.dom),window.addEventListener("resize",this.onWindowResize.bind(this))}animate(){requestAnimationFrame(this.animate.bind(this)),this.sceneManager.update(),this.camera.update(),this.sceneManager.render(),this.stats.update()}onWindowResize(){this.sceneManager.onWindowResize(),this.camera.onWindowResize()}}new rn;
